type: edu
files:
- name: src/index.html
  visible: true
  text: |
    <!doctype html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Document</title>
    </head>
    <body>

    </body>
    </html>
  learner_created: false
- name: test/test.js
  visible: false
  text: |+
    const fs = require("fs");
    const path = require('path');
    const rimraf = require("rimraf");
    const workingDir = path.resolve(__dirname, '../src');
    const pagePath = 'file://' + path.resolve(__dirname, workingDir + '/index.html');

    const {StageTest, correct, wrong} = require('hs-test-web');

    class ConverterTest extends StageTest {

        page = this.getPage(pagePath)

        tests = [
            this.page.execute(() => {
                const nodes = document.getElementsByClassName("title");

                if (nodes.length !== 1) {
                    return wrong("There should be one element with class 'title', found " + nodes.length + "!")
                }

                const titleDiv = nodes[0];

                if (titleDiv.textContent !== 'Case Converter') {
                    return wrong("The title name should be 'Case Converter', but found " + titleDiv.textContent.trim())
                }

                return correct()
            }),
            this.page.execute(() => {
                const nodes = document.getElementsByTagName("textarea");

                if (nodes.length !== 1) {
                    return wrong("There should be one 'textarea' element, found " + nodes.length + "!")
                }

                this.textArea = nodes[0];

                if (this.textArea.textContent.trim() !== '') {
                    return wrong("TextArea should be empty by default!")
                }

                return correct()
            }),
            this.page.execute(() => {
                this.upperCaseButton = document.querySelector("button#upper-case")
                this.lowerCaseButton = document.querySelector("button#lower-case")
                this.properCaseButton = document.querySelector("button#proper-case")
                this.sentenceCaseButton = document.querySelector("button#sentence-case")
                this.saveTextFileButton = document.querySelector("button#save-text-file")

                if (this.upperCaseButton === null) {
                    return wrong("Can't find a button with '#upper-case' id!")
                }

                if (this.lowerCaseButton === null) {
                    return wrong("Can't find a button with '#lower-case' id!")
                }

                if (this.properCaseButton === null) {
                    return wrong("Can't find a button with '#proper-case' id!")
                }

                if (this.sentenceCaseButton === null) {
                    return wrong("Can't find a button with '#sentence-case' id!")
                }

                if (this.saveTextFileButton === null) {
                    return wrong("Can't find a button with '#save-text-file' id!")
                }

                return correct()
            }),
            this.page.execute(() => {

                this.textArea.value = 'Lorem Ipsum is simply dummy text of the printing and typesetting industry.' +
                    ' Lorem Ipsum has been the industry\'s standard dummy text ever since the 1500s,' +
                    ' when an unknown printer took a galley of type and scrambled it to make a type specimen book.'

                const upperCaseText = 'LOREM IPSUM IS SIMPLY DUMMY TEXT OF THE PRINTING AND TYPESETTING INDUSTRY.' +
                    ' LOREM IPSUM HAS BEEN THE INDUSTRY\'S STANDARD DUMMY TEXT EVER SINCE THE 1500S,' +
                    ' WHEN AN UNKNOWN PRINTER TOOK A GALLEY OF TYPE AND SCRAMBLED IT TO MAKE A TYPE SPECIMEN BOOK.'

                this.upperCaseButton.click()

                if (this.textArea.value !== upperCaseText) {
                    return wrong("After clicking on 'Upper Case' button your text is wrong!")
                }

                const lowerCaseText = 'lorem ipsum is simply dummy text of the printing and typesetting industry.' +
                    ' lorem ipsum has been the industry\'s standard dummy text ever since the 1500s,' +
                    ' when an unknown printer took a galley of type and scrambled it to make a type specimen book.'

                this.lowerCaseButton.click()

                if (this.textArea.value !== lowerCaseText) {
                    return wrong("After clicking on 'Lower Case' button your text is wrong!")
                }

                const properCase = 'Lorem Ipsum Is Simply Dummy Text Of The Printing And Typesetting Industry.' +
                    ' Lorem Ipsum Has Been The Industry\'s Standard Dummy Text Ever Since The 1500s,' +
                    ' When An Unknown Printer Took A Galley Of Type And Scrambled It To Make A Type Specimen Book.'

                this.properCaseButton.click()

                if (this.textArea.value !== properCase) {
                    return wrong("After clicking on 'Proper Case' button your text is wrong!")
                }

                const sentenceCase = 'Lorem ipsum is simply dummy text of the printing and typesetting industry.' +
                    ' Lorem ipsum has been the industry\'s standard dummy text ever since the 1500s,' +
                    ' when an unknown printer took a galley of type and scrambled it to make a type specimen book.'

                this.sentenceCaseButton.click()

                if (this.textArea.value !== sentenceCase) {
                    return wrong("After clicking on 'Sentence Case' button your text is wrong!")
                }

                return correct()
            }),
            this.node.execute(async () => {
                await this.page.pageInstance._client.send('Page.setDownloadBehavior', {
                    behavior: 'allow',
                    downloadPath: workingDir + path.sep + "downloads"
                });
                return correct()
            }),
            this.page.execute(async () => {
                this.saveTextFileButton.click()

                const delay = ms => new Promise(res => setTimeout(res, ms));
                await delay(2000);

                return correct()
            }),
            this.node.execute(() => {
                const correctTextFileContent = 'Lorem ipsum is simply dummy text of the printing and typesetting industry.' +
                    ' Lorem ipsum has been the industry\'s standard dummy text ever since the 1500s,' +
                    ' when an unknown printer took a galley of type and scrambled it to make a type specimen book.'

                const filePath = workingDir + `${path.sep}downloads${path.sep}text.txt`;

                if (!fs.existsSync(filePath)) {
                    return wrong("Looks like you didn't download a text file named 'text.txt', after clicking on 'Save Text File' button")
                }

                let fileContent = fs.readFileSync(filePath, "utf8");

                if (fileContent !== correctTextFileContent) {
                    return wrong("Content of downloaded file is wrong!")
                }

                rimraf.sync(workingDir + '/downloads');

                return correct()
            })
        ]
    }

    it('Test stage', async function () {
        try {
            this.timeout(30000)
        } catch (ignored) {
        }
        await new ConverterTest().runTests()
    }, 30000)

  learner_created: false
- name: src/assets/css/style.css
  visible: true
  text: |-
    body {
        display: flex;
        flex-grow: 1;
        flex-direction: column;
        justify-content: center;
        align-items: flex-start;
        height: 100vh;
        width: 100vw;
        margin: 0;
    }

    .title {
        display: flex;
        flex-grow: 0;
        flex-shrink: 0;
        font-size: 3rem;
        font-weight: bold;
        margin: 0 1rem;
    }

    #input-text {
        display: flex;
        flex-grow: 1;
        flex-shrink: 1;
        padding: .25rem .5rem;
        margin: 1rem;
        width: 95%;
        border: solid 1px gray;
        border-radius: 0.25rem;
    }

    #input-text:focus {
        outline: none;
        border: solid 2px darkslategray;
    }

    .options {
        display: flex;
        flex-grow: 0;
        flex-shrink: 0;
        flex-direction: row;
        align-items: flex-start;
        margin: 0 1rem 1rem 1rem;
    }

    button[type='button'] {
        display: flex;
        flex-grow: 0;
        flex-shrink: 0;
        padding: .2rem .5rem;
        margin-right: 1rem;
        font-size: 1.25rem;
        color: white;
        background-color: blueviolet;
        border: solid 2px blueviolet;
        border-radius: .25rem;
        cursor: pointer;
    }
  learner_created: true
- name: src/assets/js/scripts.js
  visible: true
  text: |
    const text = document.getElementById('input-text');
    const upperCaseBtn = document.getElementById('upper-case');
    const lowerCaseBtn = document.getElementById('lower-case');
    const properCaseBtn = document.getElementById('proper-case');
    const sentenceCaseBtn = document.getElementById('sentence-case');
    const saveTextFileBtn = document.getElementById('save-text-file');

    /** upper case convert **/
    upperCaseBtn.addEventListener('click', () => {
        text.value = text.value.toUpperCase();
    });

    /** lower case convert **/
    lowerCaseBtn.addEventListener('click', () => {
        text.value = text.value.toLowerCase();
    });

    /** proper case convert **/
    properCaseBtn.addEventListener('click', () => {
        let converted = text.value.toLowerCase();
        text.value = converted.replace(/\w\S*/g, (txt) => txt.charAt(0).toUpperCase() + txt.substring(1));
    });

    /** sentence case convert **/
    sentenceCaseBtn.addEventListener('click', () => {
        let converted = text.value.toLowerCase();
        text.value = converted.replace(/(^|[.!?]\s+)([a-z])/g, (m, txt1, txt2) => txt1 + txt2.toUpperCase());
    });

    const createAndDownloadFile = (filename, text) => {
        let element = document.createElement('a');
        element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));
        element.setAttribute('download', filename);

        element.style.display = 'none';
        document.body.appendChild(element);

        element.click();

        document.body.removeChild(element);
    };

    saveTextFileBtn.addEventListener('click', () => createAndDownloadFile('converted-text.txt', text.value));
  learner_created: true
feedback_link: https://hyperskill.org/projects/193/stages/964/implement#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Wed, 06 Apr 2022 11:49:24 UTC
record: -1
